import os
import re
import sympy
import numpy as np
import shutil
import math


#晶胞系数需要换回去

#读入的POSCAR不能包含Selective Dynamics
# 遍历指定目录，显示目录下的所有文件名
filepath='D:\\test'
pathDir =  os.listdir(filepath)
everyfile =[]
for allDir in pathDir:
    everyfile.append(os.path.join('%s\%s' % (filepath, allDir)))












for filename in everyfile:
    txt = open(filename, 'r')
    content = txt.read()
    for i in range(10):
        content = re.sub('  ', ' ', content)
        content = re.sub('\n ', '\n', content)
    matchp = re.match(r'(.*)\n(.*)\n(.*)\n(.*)\n(.*)', content)
    print(matchp.group())
    cryname = matchp.group(1)
    magnification = float(matchp.group(2))
    xLat = matchp.group(3)
    x1 = float(re.split(' ', xLat)[0])
    x2 = float(re.split(' ', xLat)[1])
    x3 = float(re.split(' ', xLat)[2])
    realx1 = float(x1);
    realx2 = float(x2);
    realx3 = float(x3)
    yLat = matchp.group(4)
    y1 = float(re.split(' ', yLat)[0])
    y2 = float(re.split(' ', yLat)[1])
    y3 = float(re.split(' ', yLat)[2])
    realy1 = float(y1);
    realy2 = float(y2);
    realy3 = float(y3)
    zLat = matchp.group(5)
    z1 = float(re.split(' ', zLat)[0])
    z2 = float(re.split(' ', zLat)[1])
    z3 = float(re.split(' ', zLat)[2])
    realz1 = float(z1);
    realz2 = float(z2);
    realz3 = float(z3)
#获得体系名称cryname，放大系数magnification，以及a，b，c。
    txt.close()
    txt = open(filename, 'r')
    # 读取原子位置
    line = []
    for i in range(8):
        txt.readline()
    while 1:
        posLine = txt.readline()
        for i in range(10):
            posLine = re.sub('  ', ' ', posLine)
            posLine=posLine.lstrip()
        if not posLine:
            break
        line.append(re.split(' ', posLine))
    txt.close()
    #输出原子种类
    txt = open(filename, 'r')
    for i in range(5):
        txt.readline()
    typenumber=[]
    for j1 in range(2):
        posLine = txt.readline()
        for j2 in range(10):
            posLine = re.sub('  ', ' ', posLine)
            posLine = posLine.lstrip()
            posLine = re.sub('\n', '', posLine)
        typenumberguodu=re.split(' ',posLine)
        for i2 in typenumberguodu:
            if i2 =='':
                typenumberguodu.remove('')
            if i2==' ':
                typenumberguodu.remove(' ')
        typenumber.append(typenumberguodu)
    xuhao2=0
    for i in range(len(typenumber[0])):
        for j1 in range(int(typenumber[1][i])):
            line[xuhao2].append(typenumber[0][i])
            xuhao2=xuhao2+1
    # 输出位置信息
    pos = []
    for i in range(len(line) ):
        pos.append([])
        # duplicate position sites
        for j in range(3):
            i1 = i
            if i >= len(line):
                i1 = i % len(line)
            pos[i].append(float(line[i1][j]))
    posreal = []
    for i in range(len(pos)):  #
        xreal = pos[i][0] * x1 / magnification + pos[i][1] * y1 / magnification + pos[i][2] * z1 / magnification
        yreal = pos[i][0] * x2 / magnification + pos[i][1] * y2 / magnification + pos[i][2] * z2 / magnification
        zreal = pos[i][0] * x3 / magnification + pos[i][1] * y3 / magnification + pos[i][2] * z3 / magnification
        posreal.append([xreal, yreal, zreal])
    hklMaxDistance=[]
    list1=[]
    pos=tuple(pos)
    posreal=tuple(posreal)
    for hh in [5,4,3,2,1,0]:  # 此时的hkl非原坐标系的hkl，这点需要得到注意
        for kk in [5,4,3,2,1,0]:
            for ll in [5,4,3,2,1,0]:

                h=hh
                k=kk
                l=ll
                if h==k and k==l and l!=1 and l!=0:
                    continue
                if h==0 and k==0 and l==0:
                    break
                geidingH = int(hh)
                geidingK = int(kk)
                geidingL = int(ll)
                reposreal=[]
                repos=[]
                x1 = float(realx1);
                x2 = float(realx2);
                x3 = float(realx3);
                y1 = float(realy1);
                y2 = float(realy2);
                y3 = float(realy3);
                z1 = float(realz1);
                z2 = float(realz2);
                z3 = float(realz3)

                for i in range(len(posreal)):
                    reposreal.append([])
                    repos.append([])
                    for j3 in range(3):
                        reposreal[i].append(float(posreal[i][j3]))
                        repos[i].append(float(pos[i][j3]))

                # def reflect(h, k, l, posreal,pos):!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                newpointlist = []
                if (h == 0 and k != 0 and l == 0):
                    for i in range(len(posreal)):
                        reflecct_guodu = repos[i][1]
                        repos[i][1] = repos[i][2]
                        repos[i][2] = reflecct_guodu
                    reflecct_guodu = l
                    l = k
                    k = reflecct_guodu
                    lat1 = z1
                    lat2 = z2
                    lat3 = z3
                    z1 = y1
                    z2 = y2
                    z3 = y3
                    y1 = lat1
                    y2 = lat2
                    y3 = lat3
                if (h != 0 and k == 0 and l == 0):
                    for i in range(len(posreal)):
                        reflecct_guodu = repos[i][0]
                        repos[i][0] = repos[i][1]
                        repos[i][1] = repos[i][2]
                        repos[i][2] = reflecct_guodu
                    reflecct_guodu = h
                    h = k
                    k = l
                    l = reflecct_guodu
                    lat1 = x1
                    lat2 = x2
                    lat3 = x3
                    x1 = y1
                    x2 = y2
                    x3 = y3
                    y1 =z1
                    y2 = z2
                    y3=z3
                    z1 = lat1
                    z2 = lat2
                    z3 = lat3
                if (h == 0 and k == 0 and l != 0):
                    linePosition = []
                    distance = []
                    a = sympy.Symbol('a')
                    b = sympy.Symbol('b')
                    c = sympy.Symbol('c')
                    for i in range(len(reposreal)):
                        linePosition.append(repos[i][2])
                        newpointlist.append(repos[i][2])
                    linePosition.sort()

                    for i in range(len(linePosition)):
                        if i != len(linePosition) - 1:
                            Dis = linePosition[i + 1] - linePosition[i]
                            distance.append(Dis)
                        else:
                            Dis = 1 - linePosition[i] + linePosition[0]
                            distance.append(Dis)
                    MaxDistance = max(distance)
                    maxDistancePos = distance.index(MaxDistance)
                    chuzhivector00A = sympy.solve(
                        [a * x1 + b * x2 + c * x3, a * y1 + b * y2 + c * y3, a + b + c - 1], [a, b, c])
                    cos_angle = (chuzhivector00A[a] * z1 + chuzhivector00A[b] * z2 + chuzhivector00A[c] * z3) / (
                            (chuzhivector00A[a] ** 2 + chuzhivector00A[b] ** 2 + chuzhivector00A[c] ** 2) ** 0.5 * (
                            z1 ** 2 + z2 ** 2 + z3 ** 2) ** 0.5)
                    MaxDistancereal = MaxDistance * abs(cos_angle) * (z1 ** 2 + z2 ** 2 + z3 ** 2) ** 0.5
                    chuanzhi = MaxDistancereal
                if (h != 0 and k != 0 and l == 0):
                    for i in range(len(posreal)):
                        reflecct_guodu = reposreal[i][0]
                        reposreal[i][0] = reposreal[i][2]
                        reposreal[i][2] = reposreal[i][1]
                        reposreal[i][1] = reflecct_guodu
                    reflecct_guodu = h
                    h= l
                    l=k
                    k= reflecct_guodu
                    lat1 = x1
                    lat2 = x2
                    lat3 = x3
                    x1 = z1
                    x2 = z2
                    x3 = z3
                    z1 =y1
                    z2 = y2
                    z3 = y3
                    y1=lat1
                    y2 = lat2
                    y3= lat3

                if (h != 0 and k == 0 and l != 0):
                    for i in range(len(posreal)):
                        reflecct_guodu = reposreal[i][0]
                        reposreal[i][0] = reposreal[i][1]
                        reposreal[i][1] = reflecct_guodu
                    reflecct_guodu = h
                    h = k
                    k = reflecct_guodu
                    lat1 = x1
                    lat2 = x2
                    lat3 = x3
                    x1 = y1
                    x2 = y2
                    x3 = y3
                    y1 = lat1
                    y2 = lat2
                    y3 = lat3

                if (h == 0 and k != 0 and l != 0):
                    a = sympy.Symbol('a')
                    b = sympy.Symbol('b')
                    c = sympy.Symbol('c')
                    anotherZ = sympy.solve([b * k + c * l, c - 1], [b, c])
                    anotherZlist = [0, float(anotherZ[b]), float(anotherZ[c])]
                    newCoordinateMat = np.mat([[x1, x2, x3], [y1, y2, y3],
                                               [anotherZlist[0] * x1 + anotherZlist[1] * y1 + anotherZlist[2] * z1,
                                                anotherZlist[0] * x2 + anotherZlist[1] * y2 + anotherZlist[2] * z2,
                                                anotherZlist[0] * x3 + anotherZlist[1] * y3 + anotherZlist[2] * z3]])
                    newCoordinateMatni = np.linalg.inv(newCoordinateMat)
                    for i in range(len(reposreal)):
                        pointRealMat = np.mat([reposreal[i][0], reposreal[i][1], reposreal[i][2]])
                        newPointMat = pointRealMat * newCoordinateMatni
                        newpoint = newPointMat.tolist()
                        newpointlist.append(newpoint)
                    for i in range(len(newpointlist)):
                        for j4 in range(3):
                            newpointlist[i][0][j4] = (newpointlist[i][0][j4] + 100) % 1
                    for i in range(len(newpointlist)):
                        newpointlist[i] = newpointlist[i][0]
                    linePosition = []
                    linSetAtLine = []
                    for i in range(len(newpointlist)):
                        linePosition.append([newpointlist[i][1], newpointlist[i][0], newpointlist[i][2]])
                        linSetAtLine.append(newpointlist[i][1])
                    linePosition.sort()
                    linSetAtLine.sort()
                    # 线上点与点的距离计算
                    distance = []
                    for i in range(len(linePosition)):
                        if i != len(linePosition) - 1:
                            Dis = linSetAtLine[i + 1]- linSetAtLine[i]
                            distance.append(Dis)
                        else:
                            Dis = 1 - linSetAtLine[i] +linSetAtLine[0]
                            distance.append(Dis)
                    MaxDistance = max(distance)
                    maxDistancePos = distance.index(MaxDistance)
                    hklvector = [h * x1 + k * y1 + l * z1, h * x2 + k * y2 + l * z2, h * x3 + k * y3 + l * z3]
                    cos_angle = (hklvector[0] * y1 + hklvector[1] * y2 + hklvector[2] * y3) / (
                            (y1 ** 2 + y2 ** 2 + y3 ** 2) ** 0.5 * (
                            hklvector[0] ** 2 + hklvector[1] ** 2 + hklvector[2] ** 2) ** 0.5)
                    MaxDistancereal = MaxDistance * abs(cos_angle) * (y1 ** 2 + y2 ** 2 + y3 ** 2) ** 0.5
                    del anotherZ
                if (h != 0 and k != 0 and l != 0):
                    a = sympy.Symbol('a')
                    b = sympy.Symbol('b')
                    c = sympy.Symbol('c')
                    if sympy.solve([a * 1 + b * 1 + c * 1, c - 1, a - b], [a, b, c]):
                        anotherZ = sympy.solve([a * h + b * k + c * l, c - 1, a - b], [a, b, c])
                    else:
                        anotherZ = sympy.solve([a * h + b * k + c * l, c - 1, a + b], [a, b, c])
                    anotherZlist = [float(anotherZ[a]), float(anotherZ[b]), float(anotherZ[c])]
                    anotherXlist = [-k, h, 0]
                    newCoordinateMat = np.mat([[anotherXlist[0] * x1 + anotherXlist[1] * y1,
                                                anotherXlist[0] * x2 + anotherXlist[1] * y2,
                                                anotherXlist[0] * x3 + anotherXlist[1] * y3], [y1, y2, y3],
                                               [anotherZlist[0] * x1 + anotherZlist[1] * y1 + anotherZlist[2] * z1,
                                                anotherZlist[0] * x2 + anotherZlist[1] * y2 + anotherZlist[2] * z2,
                                                anotherZlist[0] * x3 + anotherZlist[1] * y3 + anotherZlist[2] * z3]])
                    newCoordinateMatni = np.linalg.inv(newCoordinateMat)
                    for i in range(len(reposreal)):
                        pointRealMat = np.mat([reposreal[i][0], reposreal[i][1], reposreal[i][2]])
                        newPointMat = pointRealMat * newCoordinateMatni
                        newpoint = newPointMat.tolist()
                        newpointlist.append(newpoint)
                    for i in range(len(newpointlist)):
                        for j in range(3):
                            newpointlist[i][0][j] = (newpointlist[i][0][j] + 100) % 1
                    for i in range(len(newpointlist)):
                        newpointlist[i] = newpointlist[i][0]
                    linePosition = []
                    linSetAtLine = []
                    for i in range(len(newpointlist)):
                        linePosition.append([newpointlist[i][1], newpointlist[i][0], newpointlist[i][2]])
                        linSetAtLine.append(newpointlist[i][1])
                    linePosition.sort()
                    linSetAtLine.sort()
                    # 线上点与点的距离计算
                    distance = []
                    for i in range(len(linePosition)):
                        if i != len(linePosition) - 1:
                            Dis = linePosition[i + 1][0] - linePosition[i][0]
                            distance.append(Dis)
                        else:
                            Dis = 1 - linePosition[i][0] + linePosition[0][0]
                            distance.append(Dis)
                    MaxDistance = max(distance)
                    maxDistancePos = distance.index(MaxDistance)
                    hklvector = [h * x1 + k * y1 + l * z1, h * x2 + k * y2 + l * z2, h * x3 + k * y3 + l * z3]
                    cos_angle = (hklvector[0] * y1 + hklvector[1] * y2 + hklvector[2] * y3) / (
                            (y1 ** 2 + y2 ** 2 + y3 ** 2) ** 0.5 * (
                            hklvector[0] ** 2 + hklvector[1] ** 2 + hklvector[2] ** 2) ** 0.5)
                    MaxDistancereal = MaxDistance * abs(cos_angle) * (y1 ** 2 + y2 ** 2 + y3 ** 2) ** 0.5
                chuanzhi = MaxDistancereal


                # def reflect(h, k, l, posreal,pos):!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!    return MaxDistance;


                hklMaxDistance.append(chuanzhi)
                list1.append((str(chuanzhi), str(geidingH) + str(geidingK) + str(geidingL)))
                print(str(chuanzhi), str(geidingH) + str(geidingK) + str(geidingL))
    listDict = dict(list1)
    print(listDict.get(max(listDict)))
    MaxHkl = list(listDict.get(max(listDict)))





    # start cut !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    MaxHkl[0] = int(MaxHkl[0]);
    MaxHkl[1] = int(MaxHkl[1]);
    MaxHkl[2] = int(MaxHkl[2])
    h = MaxHkl[0]
    k = MaxHkl[1]
    l = MaxHkl[2]
    if h == k and k == l and l != 1 and l != 0:
        continue
    if h == 0 and k == 0 and l == 0:
        break
    geidingH = int(hh)
    geidingK = int(kk)
    geidingL = int(ll)
    reposreal = []
    repos = []
    x1 = float(realx1);
    x2 = float(realx2);
    x3 = float(realx3);
    y1 = float(realy1);
    y2 = float(realy2);
    y3 = float(realy3);
    z1 = float(realz1);
    z2 = float(realz2);
    z3 = float(realz3)

    for i in range(len(posreal)):
        reposreal.append([])
        repos.append([])
        for j3 in range(3):
            reposreal[i].append(float(posreal[i][j3]))
            repos[i].append(float(pos[i][j3]))

    newpointlist = []
    new2Dpos=[]
    newrepos=[]
    newHKLzuobiao=[]
    if (h == 0 and k != 0 and l == 0):
        for i in range(len(posreal)):
            reflecct_guodu = repos[i][1]
            repos[i][1] = repos[i][2]
            repos[i][2] = reflecct_guodu
        reflecct_guodu = l
        l = k
        k = reflecct_guodu
        lat1 = z1
        lat2 = z2
        lat3 = z3
        z1 = y1
        z2 = y2
        z3 = y3
        y1 = lat1
        y2 = lat2
        y3 = lat3
    if (h != 0 and k == 0 and l == 0):
        for i in range(len(posreal)):
            reflecct_guodu = repos[i][0]
            repos[i][0] = repos[i][1]
            repos[i][1] = repos[i][2]
            repos[i][2] = reflecct_guodu
        reflecct_guodu = h
        h = k
        k = l
        l = reflecct_guodu
        lat1 = x1
        lat2 = x2
        lat3 = x3
        x1 = y1
        x2 = y2
        x3 = y3
        y1 = z1
        y2 = z2
        y3 = z3
        z1 = lat1
        z2 = lat2
        z3 = lat3
    if (h == 0 and k == 0 and l != 0):
        linePosition = []
        distance = []
        a = sympy.Symbol('a')
        b = sympy.Symbol('b')
        c = sympy.Symbol('c')
        newHKLzuobiao = [[x1, x2, x3], [y1, y2, y3], [z1*2, z2*2, z3*2]]
        xuhao3=0
        for i in range(len(typenumber[0])):
            for j in range(int(typenumberguodu[i])):
                repos[xuhao3].append(typenumber[0][i])
                xuhao3=xuhao3+1

        for i in range(2 * len(repos)):
            if i < len(repos):
                newrepos.append(list(repos[i]))
            else:
                newrepos.append(repos[i-len(repos)])
                newrepos[i][2] = float(newrepos[i][2]) + 1
        for i in range(len(newrepos)):
            newrepos[i][2]=float(newrepos[i][2]/2)
        for i in range(len(newrepos)):
            linePosition.append(float(newrepos[i][2]))
            newpointlist.append(float(newrepos[i][2]))
        linePosition.sort()

        for i in range(len(newrepos)):
            if i != len(newrepos) - 1:
                Dis = linePosition[i + 1] - linePosition[i]
                distance.append(Dis)
            else:
                Dis = 1 - linePosition[i] + linePosition[0]
                distance.append(Dis)
        MaxDistance = max(distance)
        cutpoint=[]
        for i in range(len(distance)):
            if abs(distance[i]-MaxDistance)<0.0001:
                cutpoint.append(i)
        for i in range(len(newrepos)):
            if linePosition[cutpoint[0]]<newrepos[i][2]<=linePosition[cutpoint[1]]:
                new2Dpos.append(newrepos[i])





    if (h != 0 and k != 0 and l == 0):
        for i in range(len(posreal)):
            reflecct_guodu = reposreal[i][0]
            reposreal[i][0] = reposreal[i][2]
            reposreal[i][2] = reposreal[i][1]
            reposreal[i][1] = reflecct_guodu
        reflecct_guodu = h
        h = l
        l = k
        k = reflecct_guodu
        lat1 = x1
        lat2 = x2
        lat3 = x3
        x1 = z1
        x2 = z2
        x3 = z3
        z1 = y1
        z2 = y2
        z3 = y3
        y1 = lat1
        y2 = lat2
        y3 = lat3

    if (h != 0 and k == 0 and l != 0):
        for i in range(len(posreal)):
            reflecct_guodu = reposreal[i][0]
            reposreal[i][0] = reposreal[i][1]
            reposreal[i][1] = reflecct_guodu
        reflecct_guodu = h
        h = k
        k = reflecct_guodu
        lat1 = x1
        lat2 = x2
        lat3 = x3
        x1 = y1
        x2 = y2
        x3 = y3
        y1 = lat1
        y2 = lat2
        y3 = lat3

    if (h == 0 and k != 0 and l != 0):
        a = sympy.Symbol('a')
        b = sympy.Symbol('b')
        c = sympy.Symbol('c')
        anotherZ = sympy.solve([b * k + c * l, c - 1], [b, c])
        anotherZlist = [0, float(anotherZ[b]), float(anotherZ[c])]
        newCoordinateMat = np.mat([[x1, x2, x3], [y1, y2, y3],
                                   [anotherZlist[0] * x1 + anotherZlist[1] * y1 + anotherZlist[2] * z1,
                                    anotherZlist[0] * x2 + anotherZlist[1] * y2 + anotherZlist[2] * z2,
                                    anotherZlist[0] * x3 + anotherZlist[1] * y3 + anotherZlist[2] * z3]])
        newCoordinateMatni = np.linalg.inv(newCoordinateMat)
        newHKLzuobiao=[[x1, x2, x3], [y1*2, y2*2, y3*2],
                                   [anotherZlist[0] * x1 + anotherZlist[1] * y1 + anotherZlist[2] * z1,
                                    anotherZlist[0] * x2 + anotherZlist[1] * y2 + anotherZlist[2] * z2,
                                    anotherZlist[0] * x3 + anotherZlist[1] * y3 + anotherZlist[2] * z3]]
        for i in range(len(reposreal)):
            pointRealMat = np.mat([reposreal[i][0], reposreal[i][1], reposreal[i][2]])
            newPointMat = pointRealMat * newCoordinateMatni
            newpoint = newPointMat.tolist()
            newpointlist.append(newpoint)
        for i in range(len(newpointlist)):
            for j4 in range(3):
                newpointlist[i][0][j4] = (newpointlist[i][0][j4] + 100) % 1
        for i in range(len(newpointlist)):
            newpointlist[i] = newpointlist[i][0]
        xuhao3 = 0
        for i in range(len(typenumber[0])):
            for j in range(int(typenumberguodu[i])):
                newpointlist[xuhao3].append(typenumber[0][i])
                xuhao3 = xuhao3 + 1
        for i in range(2 * len(newpointlist)):
            if i < len(newpointlist):
                newrepos.append(list(newpointlist[i]))
            else:
                newrepos.append(newpointlist[i - len(newpointlist)])
                newrepos[i][1] = float(newrepos[i][1]) + 1
        for i in range(2*len(newpointlist)):
            newrepos[i][1] = float(newrepos[i][1] / 2)
        linePosition = []
        linSetAtLine = []
        for i in range(len( newrepos)):
            linePosition.append([ float(newrepos[i][1]),  float(newrepos[i][0]),  float(newrepos[i][2])])
            linSetAtLine.append( float(newrepos[i][1]))
        linePosition.sort()
        linSetAtLine.sort()
        # 线上点与点的距离计算
        distance = []
        for i in range(len(linePosition)):
            if i != len(linePosition) - 1:
                Dis = linSetAtLine[i + 1] - linSetAtLine[i]
                distance.append(Dis)
            else:
                Dis = 1 - linSetAtLine[i] + linSetAtLine[0]
                distance.append(Dis)
        MaxDistance = max(distance)
        cutpoint = []
        for i in range(len(distance)):
            if abs(distance[i] - MaxDistance) < 0.0001:
                cutpoint.append(i)
        for i in range(len(newrepos)):
            if linSetAtLine[cutpoint[0]] < newrepos[i][1] <= linSetAtLine[cutpoint[1]]:
                new2Dpos.append(newrepos[i])



        del anotherZ
    if (h != 0 and k != 0 and l != 0):
        a = sympy.Symbol('a')
        b = sympy.Symbol('b')
        c = sympy.Symbol('c')
        if sympy.solve([a * 1 + b * 1 + c * 1, c - 1, a - b], [a, b, c]):
            anotherZ = sympy.solve([a * h + b * k + c * l, c - 1, a - b], [a, b, c])
        else:
            anotherZ = sympy.solve([a * h + b * k + c * l, c - 1, a + b], [a, b, c])
        anotherZlist = [float(anotherZ[a]), float(anotherZ[b]), float(anotherZ[c])]
        anotherXlist = [1, -float(h)/float(k), 0]
        newCoordinateMat = np.mat([[anotherXlist[0] * x1 + anotherXlist[1] * y1,
                                    anotherXlist[0] * x2 + anotherXlist[1] * y2,
                                    anotherXlist[0] * x3 + anotherXlist[1] * y3], [y1, y2, y3],
                                   [anotherZlist[0] * x1 + anotherZlist[1] * y1 + anotherZlist[2] * z1,
                                    anotherZlist[0] * x2 + anotherZlist[1] * y2 + anotherZlist[2] * z2,
                                    anotherZlist[0] * x3 + anotherZlist[1] * y3 + anotherZlist[2] * z3]])
        newHKLzuobiao = [[anotherXlist[0] * x1 + anotherXlist[1] * y1,
                                    anotherXlist[0] * x2 + anotherXlist[1] * y2,
                                    anotherXlist[0] * x3 + anotherXlist[1] * y3], [y1*2, y2*2, y3*2],
                                   [anotherZlist[0] * x1 + anotherZlist[1] * y1 + anotherZlist[2] * z1,
                                    anotherZlist[0] * x2 + anotherZlist[1] * y2 + anotherZlist[2] * z2,
                                    anotherZlist[0] * x3 + anotherZlist[1] * y3 + anotherZlist[2] * z3]]
        newCoordinateMatni = np.linalg.inv(newCoordinateMat)
        for i in range(len(reposreal)):
            pointRealMat = np.mat([reposreal[i][0], reposreal[i][1], reposreal[i][2]])
            newPointMat = pointRealMat * newCoordinateMatni
            newpoint = newPointMat.tolist()
            newpointlist.append(newpoint)
        for i in range(len(newpointlist)):
            for j in range(3):
                newpointlist[i][0][j] = (newpointlist[i][0][j] + 100) % 1
        for i in range(len(newpointlist)):
            newpointlist[i] = newpointlist[i][0]
        xuhao3 = 0
        for i in range(len(typenumber[0])):
            for j in range(int(typenumberguodu[i])):
                newpointlist[xuhao3].append(typenumber[0][i])
                xuhao3 = xuhao3 + 1
        for i in range(2 * len(newpointlist)):
            if i < len(newpointlist):
                newrepos.append(list(newpointlist[i]))
            else:
                newrepos.append(newpointlist[i - len(newpointlist)])
                newrepos[i][1] = float(newrepos[i][1]) + 1
        for i in range(2 * len(newpointlist)):
            newrepos[i][1] = float(newrepos[i][1] / 2)
        linePosition = []
        linSetAtLine = []
        for i in range(len(newrepos)):
            linePosition.append([float(newrepos[i][1]),float(newrepos[i][0]),float(newrepos[i][2])])
            linSetAtLine.append(float(newrepos[i][1]))
        linePosition.sort()
        linSetAtLine.sort()
        # 线上点与点的距离计算
        distance = []
        for i in range(len(linePosition)):
            if i != len(linePosition) - 1:
                Dis = linePosition[i + 1][0] - linePosition[i][0]
                distance.append(Dis)
            else:
                Dis = 1 - linePosition[i][0] + linePosition[0][0]
                distance.append(Dis)
        MaxDistance = max(distance)
        cutpoint = []
        for i in range(len(distance)):
            if abs(distance[i] - MaxDistance) < 0.0001:
                cutpoint.append(i)
        for i in range(len(newrepos)):
            if linSetAtLine[cutpoint[0]] < newrepos[i][1] <= linSetAtLine[cutpoint[1]]:
                new2Dpos.append(newrepos[i])








# write POSCAR
    filename = filename + 'new.vasp'
    coutfile = open('%s' % filename, 'w')
    coutfile.write(cryname)
    coutfile.write('\n')
    coutfile.write(str(magnification))
    coutfile.write('\n')
    coutfile.write(
        str(newHKLzuobiao[0][0]) + '  ' + str(newHKLzuobiao[0][1]) + '  ' + str(newHKLzuobiao[0][2]) + '\n' + str(newHKLzuobiao[1][0]) + '  ' + str(newHKLzuobiao[1][1]) + '  ' + str(
            newHKLzuobiao[1][2]) + '\n' + str(newHKLzuobiao[2][0]) + '  ' + str(newHKLzuobiao[2][1]) + '  ' + str(newHKLzuobiao[2][2]) + '\n')
    thereAreTypes = []
    for i in range(len(new2Dpos)):
        thereAreTypes.append(new2Dpos[i][3])
    newdict = {}
    for i in thereAreTypes:
        newdict[i] = thereAreTypes.count(i)
    newdictlist = []
    xuhao = 0
    for i in newdict:
        newdictlist.append([])
        newdictlist[xuhao].append(re.sub('\n', '', i))
        newdictlist[xuhao].append(newdict[i])
        xuhao = xuhao + 1
    newdictlist.sort()
    for i in range(len(newdictlist)):
        coutfile.write(newdictlist[i][0])
        coutfile.write(' ')
    coutfile.write('\n')
    for i in range(len(newdictlist)):
        coutfile.write(str(round(newdictlist[i][1])))
        coutfile.write(' ')
    coutfile.write('\n')
    coutfile.write('Direct')
    coutfile.write('\n')
    for i in range(len(newdictlist)):
        for j in range(len(new2Dpos)):
            if newdictlist[i][0]==new2Dpos[j][3]:
                coutfile.write(str(new2Dpos[j][0]))
                coutfile.write('  ')
                coutfile.write(str(new2Dpos[j][1]))
                coutfile.write('  ')
                coutfile.write(str(new2Dpos[j][2]))
                coutfile.write('\n')
    coutfile.close()





