import os
import re
import sympy
import shutil
import math


#晶胞系数需要换回去

#读入的POSCAR不能包含Selective Dynamics
# 遍历指定目录，显示目录下的所有文件名
filepath='D:\\test'
pathDir =  os.listdir(filepath)
everyfile =[]
for allDir in pathDir:
    everyfile.append(os.path.join('%s\%s' % (filepath, allDir)))

for filename in everyfile:
    txt = open(filename, 'r')
    content = txt.read()
    for i in range(10):
        content = re.sub('  ', ' ', content)
        content = re.sub('\n ', '\n', content)
    matchp = re.match(r'(.*)\n(.*)\n(.*)\n(.*)\n(.*)', content)
    print(matchp.group())
    cryname = matchp.group(1)
    magnification = float(matchp.group(2))
    xLat = matchp.group(3)
    x1 = float(re.split(' ', xLat)[0])
    x2 = float(re.split(' ', xLat)[1])
    x3 = float(re.split(' ', xLat)[2])
    yLat = matchp.group(4)
    y1 = float(re.split(' ', yLat)[0])
    y2 = float(re.split(' ', yLat)[1])
    y3 = float(re.split(' ', yLat)[2])
    zLat = matchp.group(5)
    z1 = float(re.split(' ', zLat)[0])
    z2 = float(re.split(' ', zLat)[1])
    z3 = float(re.split(' ', zLat)[2])
#获得体系名称cryname，放大系数magnification，以及a，b，c。
    txt.close()
    txt = open(filename, 'r')
    # 读取原子位置
    line = []
    for i in range(8):
        txt.readline()
    while 1:
        posLine = txt.readline()
        for i in range(10):
            posLine = re.sub('  ', ' ', posLine)
            posLine=posLine.lstrip()
        if not posLine:
            break
        line.append(re.split(' ', posLine))
    txt.close()
    #输出原子种类
    txt = open(filename, 'r')
    for i in range(5):
        txt.readline()
    typenumber=[]
    for j1 in range(2):
        posLine = txt.readline()
        for j2 in range(10):
            posLine = re.sub('  ', ' ', posLine)
            posLine = posLine.lstrip()
            posLine = re.sub('\n', '', posLine)
        typenumberguodu=re.split(' ',posLine)
        for i2 in typenumberguodu:
            if i2 =='':
                typenumberguodu.remove('')
            if i2==' ':
                typenumberguodu.remove(' ')
        typenumber.append(typenumberguodu)
    xuhao2=0
    for i in range(len(typenumber[0])):
        for j1 in range(int(typenumber[1][i])):
            line[xuhao2].append(typenumber[0][i])
            xuhao2=xuhao2+1
    # 输出位置信息
    KuoDaBeiShu = 27
    pos = []
    for i in range(len(line) * KuoDaBeiShu):
        pos.append([])
        # duplicate position sites
        for j in range(3):
            i1 = i
            if i >= len(line):
                i1 = i % len(line)
            pos[i].append(float(line[i1][j]))
    # 向三个方向扩展

    iii = 0
    for i in [0,1, -1]:
        for o in [0,1, -1]:
            for p in [0,1, -1]:
                for oo in range(len(line)):
                    pos[len(line) * iii + oo][0] = pos[len(line) * iii + oo][0] + i
                    pos[len(line) * iii + oo][1] = pos[len(line) * iii + oo][1] + o
                    pos[len(line) * iii + oo][2] = pos[len(line) * iii + oo][2] + p
                iii = 1 + iii
    position=pos
    posreal = []
    for i in range(len(pos)):  #
        xreal = pos[i][0] * x1 / magnification + pos[i][1] * y1 / magnification + pos[i][2] * z1 / magnification
        yreal = pos[i][0] * x2 / magnification + pos[i][1] * y2 / magnification + pos[i][2] * z2 / magnification
        zreal = pos[i][0] * x3 / magnification + pos[i][1] * y3 / magnification + pos[i][2] * z3 / magnification
        posreal.append([xreal, yreal, zreal])


    # 点投影到直线上
    def reflect(h, k, l, posreal):
        linePosition = []
        a = sympy.Symbol('a')
        b = sympy.Symbol('b')
        c = sympy.Symbol('c')
        realh = h * x1 + k * y1 + l * z1
        realk = h * x2 + k * y2 + l * z2
        reall = h * x3 + k * y3 + l * z3
        for i in range(len(posreal)):
            x = posreal[i][0]
            y = posreal[i][1]
            z = posreal[i][2]
            linePos = sympy.solve(
                [realh * b - a * realk, realk * c - b * reall, realh * c - reall * a, (x - a) * realh + (y - b) * realk + (z - c) * reall], [a, b, c])
            if realh!=0:
                if linePos[a]/realh <0 :
                    siteAtLine = -(linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
                else:
                    siteAtLine = (linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
            elif realk!=0:
                if linePos[b]/realk <0 :
                    siteAtLine = -(linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
                else:
                    siteAtLine = (linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
            else:
                if linePos[c]/reall <0 :
                    siteAtLine = -(linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
                else:
                    siteAtLine = (linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
            linePosition.append(siteAtLine)
        linePosition.sort()
        # 线上点与点的距离计算
        distance = []
        for i in range(len(linePosition) - 1):
            if 0<linePosition[i]<(realh**2+realk**2+reall**2)**0.5:
                Dis = linePosition[i + 1] - linePosition[i]
                distance.append(Dis)
        MaxDistance = max(distance)
        return MaxDistance;


    list1 = []
    hklMaxDistance = []

    # 寻找最大层间距
    for h in range(1):  # 此时的hkl非原坐标系的hkl，这点需要得到注意
        h = 1
        for k in range(1):
            k = 1
            for l in range(1):
                l = 0 - l
                if h==0 and k==0 and l==0:
                    break
                chuanzhi = reflect(h, k, l, posreal)
                hklMaxDistance.append(chuanzhi)
                list1.append((str(chuanzhi), str(h) + str(k) + str(l)))
                print(str(chuanzhi), str(h) + str(k) + str(l))
    listDict = dict(list1)
    # 找到其晶面指数
    print(listDict.get(max(listDict)))
    MaxHkl = list(listDict.get(max(listDict)))
    MaxHkl[0] = int(MaxHkl[0]);
    MaxHkl[1] = int(MaxHkl[1]);
    MaxHkl[2] = int(MaxHkl[2])
    realh = MaxHkl[0] * x1 + MaxHkl[1] * y1 + MaxHkl[2] * z1
    realk = MaxHkl[0] * x2 + MaxHkl[1] * y2 + MaxHkl[2] * z2
    reall = MaxHkl[0] * x3 + MaxHkl[1] * y3 + MaxHkl[2] * z3
    MaxHkl[0] = realh;
    MaxHkl[1] = realk;
    MaxHkl[2] = reall

    a = sympy.Symbol('a')
    b = sympy.Symbol('b')
    c = sympy.Symbol('c')
    linePosition = []
    pointData = []
    for i in range(len(position)):
        pointData.append([])
        x = position[i][0]
        y = position[i][1]
        z = position[i][2]
        xreal = x * x1 / magnification + y * y1 / magnification + z * z1 / magnification
        yreal = x * x2 / magnification + y * y2 / magnification + z * z2 / magnification
        zreal = x * x3 / magnification + y * y3 / magnification + z * z3 / magnification
        linePos = sympy.solve(
            [MaxHkl[0] * b - a * MaxHkl[1], MaxHkl[1] * c - b * MaxHkl[2], MaxHkl[0] * c - MaxHkl[2] * a,
             (xreal - a) * MaxHkl[0] + (yreal - b) * MaxHkl[1] + (zreal - c) * MaxHkl[2]], [a, b, c])
        if realh != 0:
            if linePos[a] / realh < 0:
                siteAtLine = -(linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
            else:
                siteAtLine = (linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
        elif realk != 0:
            if linePos[b] / realk < 0:
                siteAtLine = -(linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
            else:
                siteAtLine = (linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
        else:
            if linePos[c] / reall < 0:
                siteAtLine = -(linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
            else:
                siteAtLine = (linePos[a] ** 2 + linePos[b] ** 2 + linePos[c] ** 2) ** 0.5
        linePosition.append(siteAtLine)
        pointData[i].append(siteAtLine)
        pointData[i].append(linePos)
        pointData[i].append([x, y, z])
        atomType = i % len(line)
        pointData[i].append(line[atomType][3])
        # pointData[I][0]是线上位置至原点距离，pointData[I][1]是线上位置信息，pointData[I][2]是原始位置信息
        # from small to big
    distance = []
    # 寻找切割起始位置
    pointData.sort()
    point0 = 0
    for i in range(len(pointData) - 1):
        if pointData[i][0]>0:
            Dis = pointData[i + 1][0] - pointData[i][0]
            if abs(Dis - float(max(listDict))) < 0.00001:
                point0 = i + 1
                break

    # 从起始位置切割并建立新的poscar
    modifiedPointData = []
    iftrue = 1
    for i in range(len(pointData) - 1):
        if i >= point0 and iftrue == 1:
            if abs(abs(pointData[i + 1][0] - pointData[i][0]) - float(max(listDict))) < 0.00001:
                iftrue = 0
            modifiedPointData.append(pointData[i])
    for i in range(len(modifiedPointData)):
        del modifiedPointData[i][1]
        del modifiedPointData[i][0]
    filename=filename+'new.vasp'
    coutfile = open('%s' % filename, 'w')
    coutfile.write(cryname)
    coutfile.write('\n')
    coutfile.write(str(magnification))
    coutfile.write('\n')
    coutfile.write(str(x1*3)+ '  '+str(x2*3)+'  '+str(x3*3)+'\n'+str(y1*3)+'  '+str(y2*3)+'  '+str(y3*3)+'\n'+str(z1*3)+'  '+str(z2*3)+'  '+str(z3*3)+'\n')
    thereAreTypes = []
    for i in range(len(modifiedPointData)):
        thereAreTypes.append(modifiedPointData[i][1])
    newdict = {}
    for i in thereAreTypes:
        newdict[i] = thereAreTypes.count(i)
    newmodifiedPointData = []  # 把元素类型放到第一列
    for i in range(len(modifiedPointData)):
        newmodifiedPointData.append([])
        newmodifiedPointData[i].append(modifiedPointData[i][1])
        newmodifiedPointData[i].append(modifiedPointData[i][0])
    newmodifiedPointData.sort()
    newdictlist = []
    xuhao = 0
    for i in newdict:
        newdictlist.append([])
        newdictlist[xuhao].append(re.sub('\n', '', i))
        newdictlist[xuhao].append(newdict[i])
        xuhao = xuhao + 1
    newdictlist.sort()
    for i in range(len(newdictlist)):
        coutfile.write(newdictlist[i][0])
        coutfile.write(' ')
    coutfile.write('\n')
    for i in range(len(newdictlist)):
        coutfile.write(str(round(newdictlist[i][1])))
        coutfile.write(' ')
    coutfile.write('\n')
    coutfile.write('Direct')
    coutfile.write('\n')
    for i in range(len(newmodifiedPointData)):
        coutfile.write(str((newmodifiedPointData[i][1][0]+1)/3))
        coutfile.write('  ')
        coutfile.write(str((newmodifiedPointData[i][1][1]+1)/3))
        coutfile.write('  ')
        coutfile.write(str((newmodifiedPointData[i][1][2]+1)/3))
        coutfile.write('\n')
    coutfile.close()

